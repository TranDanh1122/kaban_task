// schema.prisma
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Files {
    id           String  @id @default(cuid())
    name         String
    url          String
    public_id    String
    relationType String?
    relationId   String?
    Task         Task?   @relation(fields: [taskId], references: [id])
    taskId       String?
}

model Subtask {
    id     String  @id @default(cuid())
    name   String
    status Boolean @default(false)
    task   Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String
}

model Task {
    id        String    @id @default(cuid())
    title     String
    content   String?
    order     Int       @default(autoincrement())
    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")
    status    Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
    statusId  String
    subtasks  Subtask[]
    files     Files[]
}

model Status {
    id      String @id @default(cuid())
    name    String
    color   String
    board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
    boardId String
    Task    Task[]
}

model Board {
    id        String   @id @default(cuid())
    title     String
    slug      String
    isArchive Boolean  @default(false)
    author    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?
    Status    Status[]

    @@unique([slug, userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")
    Board         Board[]
    Account       Account[]
    Session       Session[]

    @@map(name: "users")
}

model Account {
    id                 String    @id @default(cuid())
    userId             String
    providerType       String
    providerId         String
    providerAccountId  String
    refreshToken       String?
    accessToken        String?
    accessTokenExpires DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    userId       String
    expires      DateTime
    sessionToken String   @unique
    accessToken  String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])
}
