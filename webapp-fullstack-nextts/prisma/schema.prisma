// schema.prisma
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Subtask {
    id     String  @id @default(cuid())
    name   String
    status Boolean @default(false)
    task   Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String
}

model Task {
    id        String    @id @default(cuid())
    title     String
    content   String?
    order     Int       @default(autoincrement())
    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")
    status    Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
    statusId  String
    subtasks  Subtask[]
}

model Status {
    id      String @id @default(cuid())
    name    String
    color   String
    board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
    boardId String
    Task    Task[]
}

model Board {
    id        String   @id @default(cuid())
    title     String
    slug      String
    isArchive Boolean  @default(false)
    author    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?
    Status    Status[]

    @@unique([slug, userId])
}

model User {
    id        String   @id @default(cuid())
    name      String?
    email     String?  @unique
    avatar    String?
    password  String?
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    Board     Board[]

    @@map(name: "users")
}
